name: 🧪 Test Suite

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: "20"
  PNPM_VERSION: "8"

jobs:
  # Lint and Type Check
  lint:
    name: 🔍 Lint & Type Check
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📥 Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: 📦 Install dependencies
        run: |
          cd apps/web
          npm ci

      - name: 🔍 Run ESLint
        run: |
          cd apps/web
          npm run lint

      - name: 🏷️ Run TypeScript check
        run: |
          cd apps/web
          npm run type-check

  # Unit and Integration Tests
  test-unit:
    name: 🧪 Unit & Integration Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: 📥 Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-

      - name: 📦 Install dependencies
        run: |
          cd apps/web
          npm ci

      - name: 🧪 Run unit tests
        run: |
          cd apps/web
          npm run test:run
        env:
          # Test environment variables
          NEXT_PUBLIC_SUPABASE_URL: https://test.supabase.co
          NEXT_PUBLIC_SUPABASE_ANON_KEY: test-anon-key
          SUPABASE_SERVICE_ROLE_KEY: test-service-role-key
          STRIPE_SECRET_KEY: sk_test_mock
          NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: pk_test_mock
          STRIPE_WEBHOOK_SECRET: whsec_mock

      - name: 📊 Generate coverage report
        run: |
          cd apps/web
          npm run test:coverage

      - name: ☂️ Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./apps/web/coverage/lcov.info
          flags: unittests
          name: unit-tests-${{ matrix.node-version }}

  # API Tests (Edge Functions)
  test-api:
    name: 🌐 API & Edge Function Tests
    runs-on: ubuntu-latest
    needs: [lint]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🦕 Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: 📦 Install dependencies
        run: |
          cd apps/web
          npm ci

      - name: 🗄️ Setup test database
        run: |
          cd apps/web
          # Run database migrations for testing
          echo "Setting up test database..."
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

      - name: 🧪 Test API routes
        run: |
          cd apps/web
          npm run test:run -- tests/api/
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          NEXT_PUBLIC_SUPABASE_URL: https://test.supabase.co
          NEXT_PUBLIC_SUPABASE_ANON_KEY: test-anon-key
          SUPABASE_SERVICE_ROLE_KEY: test-service-role-key
          STRIPE_SECRET_KEY: sk_test_mock
          NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: pk_test_mock
          STRIPE_WEBHOOK_SECRET: whsec_mock

      - name: 🔗 Test Edge Functions
        run: |
          echo "Testing Supabase Edge Functions..."
          # Test edge functions if they exist
          if [ -d "supabase/functions" ]; then
            cd supabase/functions
            # Run edge function tests here
            echo "Edge functions directory found"
          fi

  # End-to-End Tests
  test-e2e:
    name: 🎭 End-to-End Tests
    runs-on: ubuntu-latest
    needs: [test-unit]
    if: github.event_name == 'push' || github.event.pull_request.draft == false

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Install dependencies
        run: |
          cd apps/web
          npm ci

      - name: 📦 Install Playwright
        run: |
          cd apps/web
          npx playwright install --with-deps chromium

      - name: 🏗️ Build application
        run: |
          cd apps/web
          npm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: https://test.supabase.co
          NEXT_PUBLIC_SUPABASE_ANON_KEY: test-anon-key
          NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: pk_test_mock

      - name: 🎭 Run E2E tests
        run: |
          cd apps/web
          echo "E2E tests would run here"
          # npm run test:e2e
        env:
          NODE_ENV: test
          NEXT_PUBLIC_SUPABASE_URL: https://test.supabase.co
          NEXT_PUBLIC_SUPABASE_ANON_KEY: test-anon-key
          NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: pk_test_mock

      - name: 📸 Upload E2E test artifacts
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: e2e-test-results
          path: |
            apps/web/test-results/
            apps/web/playwright-report/
          retention-days: 30

  # Security Audit
  security:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🔍 Run npm audit
        run: |
          cd apps/web
          npm audit --audit-level=moderate

      - name: 🔒 Run security scan
        run: |
          cd apps/web
          npx audit-ci --moderate

  # Performance Tests
  performance:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Install dependencies
        run: |
          cd apps/web
          npm ci

      - name: 🏗️ Build application
        run: |
          cd apps/web
          npm run build

      - name: ⚡ Run Lighthouse CI
        run: |
          cd apps/web
          echo "Lighthouse CI would run here"
          # npx @lhci/cli@0.12.x autorun

  # Test Summary
  test-summary:
    name: 📋 Test Summary
    runs-on: ubuntu-latest
    needs: [lint, test-unit, test-api, security]
    if: always()

    steps:
      - name: 📋 Test Results Summary
        run: |
          echo "## 🧪 Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Lint & Type Check | ${{ needs.lint.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ${{ needs.test-unit.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| API Tests | ${{ needs.test-api.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Audit | ${{ needs.security.result }} |" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.lint.result }}" == "failure" || "${{ needs.test-unit.result }}" == "failure" || "${{ needs.test-api.result }}" == "failure" ]]; then
            echo "❌ Some tests failed!"
            exit 1
          else
            echo "✅ All tests passed!"
          fi
