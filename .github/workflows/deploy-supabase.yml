name: Deploy to Supabase

on:
  push:
    branches: [main]
    paths:
      - "supabase/**"
  pull_request:
    branches: [main]
    paths:
      - "supabase/**"
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "production"
        type: choice
        options:
          - production
          - staging

jobs:
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Link to Supabase project
        run: |
          echo "$SUPABASE_ACCESS_TOKEN" | supabase auth login --token
          supabase link --project-ref $SUPABASE_PROJECT_ID
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_STAGING_PROJECT_ID }}

      - name: Deploy migrations
        run: |
          supabase db push --include-all
        env:
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_STAGING_DB_PASSWORD }}

      - name: Configure database settings for cron jobs
        run: |
          echo "‚öôÔ∏è Configuring database settings for cron jobs"
          SUPABASE_URL="https://${{ secrets.SUPABASE_STAGING_PROJECT_ID }}.supabase.co"
          SERVICE_ROLE_KEY="${{ secrets.SUPABASE_STAGING_SERVICE_ROLE_KEY }}"

          # Set database configuration parameters via psql
          PGPASSWORD="${{ secrets.SUPABASE_STAGING_DB_PASSWORD }}" psql \
            "postgresql://postgres@db.${{ secrets.SUPABASE_STAGING_PROJECT_ID }}.supabase.co:5432/postgres" \
            -c "ALTER DATABASE postgres SET app.supabase_url = '${SUPABASE_URL}';" \
            -c "ALTER DATABASE postgres SET app.service_role_key = '${SERVICE_ROLE_KEY}';" \
            -c "SELECT pg_reload_conf();" \
            -c "SELECT 'Configuration applied:', name, setting FROM pg_settings WHERE name IN ('app.supabase_url', 'app.service_role_key');"

          echo "‚úÖ Database configuration completed for staging"

      - name: Deploy edge functions
        run: |
          # Deploy individual functions with proper environment variables
          supabase functions deploy update-geoip-database \
            --project-ref $SUPABASE_PROJECT_ID \
            --verify-jwt false

            supabase functions deploy event-aggregator \
            --project-ref $SUPABASE_PROJECT_ID \
            
          supabase functions deploy process-booking \
            --project-ref $SUPABASE_PROJECT_ID
            
          supabase functions deploy send-booking-confirmation \
            --project-ref $SUPABASE_PROJECT_ID
            
          supabase functions deploy webhooks \
            --project-ref $SUPABASE_PROJECT_ID
        env:
          SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_STAGING_PROJECT_ID }}

      - name: Set function secrets
        run: |
          # Set environment variables for edge functions
          supabase secrets set MAXMIND_LICENSE_KEY="${{ secrets.MAXMIND_LICENSE_KEY }}" \
            --project-ref $SUPABASE_PROJECT_ID

          supabase secrets set STRIPE_SECRET_KEY="${{ secrets.STRIPE_SECRET_KEY }}" \
            --project-ref $SUPABASE_PROJECT_ID
        env:
          SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_STAGING_PROJECT_ID }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Link to Supabase project
        run: |
          echo "$SUPABASE_ACCESS_TOKEN" | supabase auth login --token
          supabase link --project-ref $SUPABASE_PROJECT_ID
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}

      - name: Deploy migrations
        run: |
          supabase db push --include-all
        env:
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}

      - name: Deploy edge functions
        run: |
          # Deploy individual functions with proper environment variables
          supabase functions deploy update-geoip-database \
            --project-ref $SUPABASE_PROJECT_ID \
            --verify-jwt false

          supabase functions deploy event-aggregator \
            --project-ref $SUPABASE_PROJECT_ID \

          supabase functions deploy process-booking \
            --project-ref $SUPABASE_PROJECT_ID
            
          supabase functions deploy send-booking-confirmation \
            --project-ref $SUPABASE_PROJECT_ID
            
          supabase functions deploy webhooks \
            --project-ref $SUPABASE_PROJECT_ID
        env:
          SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}

      - name: Set function secrets
        run: |
          # Set environment variables for edge functions
          supabase secrets set MAXMIND_LICENSE_KEY="${{ secrets.MAXMIND_LICENSE_KEY }}" \
            --project-ref $SUPABASE_PROJECT_ID

          supabase secrets set STRIPE_SECRET_KEY="${{ secrets.STRIPE_SECRET_KEY }}" \
            --project-ref $SUPABASE_PROJECT_ID
        env:
          SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}

      - name: Notify deployment success
        if: success()
        run: |
          echo "‚úÖ Successfully deployed to Supabase production!"
          echo "üîÑ GeoIP update function: https://${{ secrets.SUPABASE_PROJECT_ID }}.supabase.co/functions/v1/update-geoip-database"
          echo "üìß Booking functions: Available"
          echo "üóÑÔ∏è Database: Migrations applied"

  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: failure()

    steps:
      - name: Deployment failed
        run: |
          echo "‚ùå Supabase deployment failed!"
          echo "Please check the logs and retry the deployment."
          exit 1
